# -*- coding: utf8 -*-
"""
1. Nginx作用:
    实现分流, 转发, 负载均衡, 分担服务器的压力

2. Nginx既可以做正向代理,也可以做反向代理:
    正向代理: 请求从局域网发出,经过代理服务器,然后到达互联网上的服务器
    特点: 服务端并不知道真正的客户端是谁
    正向代理的对象是客户端

    反向代理: 请求从互联网发出,先进入代理服务器,再转发给局域网内的服务器
    特点: 客户端并不知道真正的服务端是谁
    反向代理的对象是服务端

3. Nginx是一个开源的高性能的HTTP服务器和反向代理:
    1. 作为web服务器,它处理静态文件和索引文件效果非常高
    2. 它的设计非常注重效率,最大支持5万个并发连接,但是只占用很少的内存空间
    3. 稳定性高,配置简洁
    4. 强大的反向代理和负载均衡功能,平衡集群中各个服务器的负载压力应用

4. uWSGI是一个web服务器:
    1. 实现了WSGI协议/uwsgi/http等协议
    2. Nginx中HttpUwsgiModule的作用与uWSGI服务器进行交换
    3. WSGI是一种Web服务器网关接口,它是一个Web服务器(nginx,uWSGI等服务器)与web应用通信的一种规范

5.Nginx与uWSGI服务器之间如何配合工作:
    1. 首先浏览器发起http请求到nginx服务器
    2. nginx根据接收到请求包,进行url分析,判断访问的资源类型,如果是静态资源,直接读取静态资源返回给浏览器
    3. 如果请求的是动态资源就转交给uWSGI服务器(Nginx服务器和uWSGI服务器可以通过uwsgi协议进行通信)
    4. uWSGI服务器接收到请求后根据自身的uwsgi和WSGI协议将包进行处理,处理成WSGI可以接受的格式,并转发给WSGI
    5. WSGI根据请求调用Django应用程序,进行逻辑处理
    6. Django框架下的应用进行逻辑处理后,将返回值发送到uWSGI服务器,然后uWSGI服务器再返回给nginx
    7. 最后nginx将返回值返回给浏览器进行渲染显示给用户

6. Nginx与Apache对比:
    1. 轻量级,同样起web服务,比apache占用更少的内存及资源
    2. 抗并发,nginx处理请求是异步非阻塞的,支持更多的并发连接,而apache则是阻塞型的,在高并发下nginx能保持低资源低消耗高性能
    3. 配置简洁
    4. 高度模块化的设计,编写模块相对简单
    5. 社区活跃

7. Django本身提供了runserver,为什么不能直接用来部署,而使用nginx+uWSGI部署:
    1. runserver方法是调试Django时常用到的运行方式,它使用Django自带的WSGI Server运行,主要在测试和开发中使用,并且runserver开启的方式也是单进程
    2. uWSGI是一个web服务器,它实现了WSGI(web服务网关接口),uwsgi(线路协议),http等协议.注意uwsgi是一种通信协议,而uWSGI是实现uwsgi协议与WSGI协议的web服务器
    3. uWSGI具有超快的性能,低内存占用和多app管理等优点,并且搭配着Nginx就是一个生产环境了,能够将用户请求与应用app隔离,实现真正的部署,相比来讲,支持的并发量更高,方便管理多进程,发挥多核的优势,提高性能
"""