# -*- coding: utf8 -*-

"""
1. 代码优化
  >改进算法,选择合适的数据结构:
    1): O(1) -> O(lgn) -> O(nlgn) -> O(n) -> O(n^2) -> O(n^3) -> O(n^K) -> O(k^n) -> O(n!) 
  
  > 字典优先于列表:

  > 交集/并集/差集: 集合优先于列表

  > 列表解析优于循环中重新创建一个新的列表更有效:
    列表解析:
      1): 根据已有列表,高效创建新列表的方式
      2): 迭代机制: [expression for iter_val in iterable]

  > 生成器表达式:
    大数据处理,生成器优势更明显:
      1): (expression for iter_val in iterable)

  > 循环优化:
    1) 尽量减少循环过程中的计算量,有多重循环的尽量将内层的计算提到上一层,这样避免重复计算
    2) 通过判断,过滤掉不必要的计算项
  
  > 字符串优化:
    python中的字符串对象是不可改变的,因此对任何字符串的操作如拼接,修改等都将产生一个新的字符串对象,而不是基于原字符串
    1): 使用join而不是+进行拼接字符串
    2): 对字符串可以使用正则表达式或则内置函数处理: 优先内置函数
    3): 格式化字符串: 百分号格式化优先于+法格式化

2. 定位程序性能瓶颈:
  > profile:
    1): ncalls: 函数调用的次数
    2): tottime: 函数的总运行时间
    3): percall: 函数运行一次的平均时间
  
  > cProfile:

  > hotshot:
"""